#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#include "common.glsl"

struct Vertex
{
    vec3 pos;
    vec3 norm;
    vec4 colour;
    vec2 uv;
};

layout(binding = 0, set = 2) buffer readonly Vertices
{
    vec4 v[];
} vertices[];

layout(binding = 1, set = 2) buffer readonly Indices
{
    int i[];
} indices[];

layout(binding = 4, set = 2) buffer readonly MeshInfo
{
    Mesh m[];
} meshInfo;

hitAttributeEXT block {
    vec2 bary_coord;
    uint primitive_id;
} attribs;

ivec3 getIndex(uint base_index, uint resource_index)
{
    ivec3 ret;
    if (base_index % 2 == 0)
    {
        ret.x = indices[resource_index].i[base_index / 2] & 0xFFFF;
        ret.y = (indices[resource_index].i[base_index / 2] >> 16) & 0xFFFF;
        ret.z = indices[resource_index].i[(base_index / 2) + 1] & 0xFFFF;
    }
    else
    {
        ret.x = (indices[resource_index].i[base_index / 2] >> 16) & 0xFFFF;
        ret.y = indices[resource_index].i[(base_index / 2) + 1] & 0xFFFF;
        ret.z = (indices[resource_index].i[(base_index / 2) + 1] >> 16) & 0xFFFF;
    }
    return ret;
}

uint vertexSize = 3;

Vertex unpackVertex(uint index)
{
    uint resource_index = meshInfo.m[gl_InstanceCustomIndexEXT+gl_GeometryIndexEXT].vertex_offset;
    
    Vertex v;

    vec4 d0 = vertices[resource_index].v[vertexSize * index + 0];
    vec4 d1 = vertices[resource_index].v[vertexSize * index + 1];
    vec4 d2 = vertices[resource_index].v[vertexSize * index + 2];

    v.pos = d0.xyz;
    v.norm = vec3(d0.w, d1.x, d1.y);
    v.colour = vec4(d1.z, d1.w, d2.x, d2.y);
    v.uv = vec2(d2.z, d2.w);
    return v;
}

mat4 lookAt(vec3 eye, vec3 center, vec3 up)
{
    vec3 f = vec3(normalize(center - eye));
    vec3 s = vec3(normalize(cross(f, up)));
    vec3 u = vec3(cross(s, f));

    mat4 Result = mat4(1);
    Result[0][0] = s.x;
    Result[1][0] = s.y;
    Result[2][0] = s.z;
    Result[0][1] = u.x;
    Result[1][1] = u.y;
    Result[2][1] = u.z;
    Result[0][2] =-f.x;
    Result[1][2] =-f.y;
    Result[2][2] =-f.z;
    Result[3][0] =-dot(s, eye);
    Result[3][1] =-dot(u, eye);
    Result[3][2] = dot(f, eye);

    return Result;
}

void main()
{
    Mesh mesh_info = meshInfo.m[gl_InstanceCustomIndexEXT + gl_GeometryIndexEXT];
    for (uint i = 0; i < mesh_info.indices; i += 3)
    {
        ivec3 triangle_indices = getIndex(i, mesh_info.index_offset);

        mat4x3 transform = gl_ObjectToWorldEXT;
        /*
        if (mesh_info.billboard > 0)
        {
            mat4 scale = mat4(vec4(mesh_info.scale.x, 0, 0, 0), vec4(0, mesh_info.scale.y, 0, 0), vec4(0, 0, mesh_info.scale.z, 0), vec4(0,0,0,1));
            mat4 pos = mat4(1.0);
            pos[3] = vec4(transform[3], 1.0);
            mat4 rot = mat4(transpose(mat3(lookAt(gl_WorldRayOriginEXT, normalize(gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT), vec3(0, -1.0, 0)))));
            transform = mat4x3(pos * rot * scale);
        }
        */

        vec3 v0 = transform * vec4(unpackVertex(triangle_indices.x).pos, 1.0);
        vec3 v1 = transform * vec4(unpackVertex(triangle_indices.y).pos, 1.0);
        vec3 v2 = transform * vec4(unpackVertex(triangle_indices.z).pos, 1.0);

        vec3 e1 = v1 - v0;
        vec3 e2 = v2 - v0;

        vec3 h = cross(gl_WorldRayDirectionEXT, e2);
        float a = dot(e1, h);

        if (a > -0.00001 && a < 0.00001)
            continue;

        float f = 1/a;
        vec3 s = gl_WorldRayOriginEXT - v0;
        float u = f * dot(s, h);

        if (u < 0.0 || u > 1.0)
            continue;

        vec3 q = cross(s, e1);
        float v = f * dot(gl_WorldRayDirectionEXT, q);

        if (v < 0.0 || u + v > 1.0)
            continue;

        float t = f * dot(e2, q);

        if (t > gl_RayTminEXT && t < gl_RayTmaxEXT)
        {
            attribs.bary_coord = vec2(u, v);
            attribs.primitive_id = i / 3;
            if (reportIntersectionEXT(t, 0u))
                return;
        }
    }
}
