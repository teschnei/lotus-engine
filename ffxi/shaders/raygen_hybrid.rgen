#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "common.glsl"
#include "sampling.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = 3, set = 2) uniform MaterialInfo
{
    Material m;
} materials[];

layout(binding = 4, set = 2) buffer readonly MeshInfo
{
    Mesh m[];
} meshInfo;

layout(binding = 0, set = 1, rgba32f) uniform image2D light_out;
layout(binding = 1, set = 1) uniform sampler2D position_in;
layout(binding = 2, set = 1) uniform sampler2D normal_in;
layout(binding = 3, set = 1) uniform sampler2D face_normal_in;
layout(binding = 4, set = 1) uniform sampler2D albedo_in;
layout(binding = 5, set = 1) uniform usampler2D material_index_in;

layout(std430, binding = 6, set = 1) buffer readonly Light
{
    LightBuffer light;
    LightInfo light_info[];
} light;

layout(binding = 7, set = 1) uniform Camera {
    mat4 proj;
    mat4 view;
    mat4 proj_inverse;
    mat4 view_inverse;
    vec4 eye_pos;
} camera;

layout(location = 0) rayPayloadEXT HitValue
{
    vec3 BRDF;
    vec3 diffuse;
    vec3 normal;
    int depth;
    uint seed;
    float weight;
    vec3 origin;
    vec3 direction;
    float distance;
    vec3 particle;
    vec3 prev_pos;
} hitValue;

layout(location = 1) rayPayloadEXT Shadow 
{
    vec4 light;
    vec4 shadow;
} shadow;

void main() 
{
    vec2 uv = vec2(float(gl_LaunchIDEXT.x)/float(gl_LaunchSizeEXT.x - 1), float(gl_LaunchIDEXT.y)/float(gl_LaunchSizeEXT.y - 1));
    vec3 position = texture(position_in, uv).xyz;
    vec3 normal = texture(normal_in, uv).xyz;
    vec3 face_normal = texture(face_normal_in, uv).xyz;
    vec4 albedo = texture(albedo_in, uv);
    uint mesh_index = texture(material_index_in, uv).r;
    uint material_index = meshInfo.m[mesh_index].material_index;

    float dot_product = dot(-light.light.diffuse_dir, normal);

    vec3 diffuse_color = vec3(0.0);
    float brightness = 0;

    Material material = materials[material_index].m;

    if (material.light_type == 0)
    {
        diffuse_color = light.light.entity.diffuse_color.rgb;
        brightness = light.light.entity.brightness;
    }
    else
    {
        diffuse_color = light.light.landscape.diffuse_color.rgb;
        brightness = light.light.landscape.brightness;
    }

    vec3 trace_origin = position + face_normal * 0.001;
    vec3 diffuse = vec3(0.0);
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    for (int i = 0; i < light.light.light_count; i++)
    {
        vec3 diff = light.light_info[i].pos - trace_origin;
        vec3 dir = normalize(diff);
        float length = length(diff);
        float radius = light.light_info[i].radius;
        if (length > radius)
        {
            float att = 1;
            float intensity = light.light_info[i].intensity;
            int use_pdf = 1;
            if (intensity > 0)
            {
                att = max(1, radius * radius) / (length * length);
            }
            else
            {
                intensity = 1;
                use_pdf = 0;
            }
            shadow.shadow = vec4(0.0);

            att *= dot(dir, normal);
            if (att > 0.001)
            {
                shadow.light = vec4(light.light_info[i].colour * intensity * att, 1.0);
                vec3 trace_dir = dir;
                float pdf = 1;

                if (radius > 0)
                {
                    vec3 tangent, bitangent;
                    createCoordinateSystem(dir, tangent, bitangent);

                    float temp_pdf;
                    trace_dir = samplingCone(seed, temp_pdf, tangent, bitangent, dir, radius, dot(diff, diff));
                    if (use_pdf > 0)
                        pdf = temp_pdf;
                }

                traceRayEXT(topLevelAS, gl_RayFlagsSkipClosestHitShaderEXT, 0x01 | 0x02 | 0x10 , 1, 0, 2, trace_origin, 0.000, trace_dir, length, 1);
                diffuse += shadow.shadow.rgb / pdf;
            }
        }
    }

    vec3 tangent, bitangent;
    createCoordinateSystem(normal, tangent, bitangent);

    hitValue.depth = 0;
    hitValue.seed = seed;
    hitValue.weight = 0.0;

    const int max_samples = 1;
    vec3 BRDF = vec3(albedo / M_PI);
    vec3 accumulation = diffuse;
    for (int samples = 0; samples < max_samples; ++samples)
    {
        //BRDF * M_PI
        vec3 weight = albedo.rgb;
        float pdf;
        hitValue.origin = position.xyz;
        hitValue.direction = samplingHemisphere(hitValue.seed, pdf, tangent, bitangent, normal);
        for(; hitValue.depth < 1; hitValue.depth++)
        {
            traceRayEXT(topLevelAS, 0, 0x01 | 0x02, 0, 0, 1, hitValue.origin, 0.001, hitValue.direction, 1000.0, 0);
            vec3 factor = hitValue.BRDF * weight;
            accumulation += hitValue.diffuse * factor;
            weight *= factor;
        }
    }

    imageStore(light_out, ivec2(gl_LaunchIDEXT.xy), (vec4(accumulation, 0.0) / float(max_samples)) / M_PI);
}
